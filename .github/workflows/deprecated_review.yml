name: Deprecated Dependency Review

on:
  push:
    branches:
      - deprecate_deps

jobs:
  audit-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: audit
        run: |
          npm audit --json > audit-results.json || true

      - name: Generate Markdown summary
        id: summary
        run: |
          node <<'EOF'
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
          let md = `# :warning: Deprecated or Vulnerable Dependencies Detected\n\n`;
          if (data.metadata && data.metadata.vulnerabilities) {
            md += `| Type | Count |\n|------|-------|\n`;
            for (const [type, count] of Object.entries(data.metadata.vulnerabilities)) {
              md += `| ${type} | ${count} |\n`;
            }
          }
          // List affected dependencies for npm v7+ format
          if (data.vulnerabilities && Object.keys(data.vulnerabilities).length > 0) {
            md += `\n## Affected Dependencies\n`;
            md += `| Package | Severity | Installed Version | Patched Version |\n|---------|----------|-------------------|-----------------|\n`;
            for (const [pkg, vuln] of Object.entries(data.vulnerabilities)) {
              if (vuln.via && vuln.via.length > 0 && vuln.severity !== 'none') {
                let patched = vuln.fixAvailable && vuln.fixAvailable.name ? vuln.fixAvailable.version : 'None';
                md += `| ${pkg} | ${vuln.severity} | ${vuln.installed} | ${patched} |\n`;
              }
            }
          }
          // List advisories for npm v6 format
          if (data.advisories && Object.keys(data.advisories).length > 0) {
            md += `\n## Advisories\n`;
            for (const [id, adv] of Object.entries(data.advisories)) {
              md += `- **${adv.module_name}**: [${adv.title}](${adv.url}) (Severity: ${adv.severity}, Installed: ${adv.findings.map(f=>f.version).join(', ')})\n`;
            }
          }
          fs.writeFileSync('audit-summary.md', md);
          EOF

      - name: Check for vulnerabilities
        id: check_vuln
        run: |
          node -e "const fs = require('fs'); const data = JSON.parse(fs.readFileSync('audit-results.json', 'utf8')); if (data.metadata && data.metadata.vulnerabilities && Object.values(data.metadata.vulnerabilities).some(v => v > 0)) { process.exit(1); }"

      - name: Create issue if vulnerabilities found
        if: failure() && steps.check_vuln.outcome == 'failure'
        id: create_issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: 'Deprecated or Vulnerable Dependencies Detected'
          content-filepath: audit-summary.md
          labels: 'dependencies,security,automated'

      - name: Show created issue link
        if: steps.create_issue.outputs.issue-number
        run: |
          echo "::notice::Created issue: https://github.com/${{ github.repository }}/issues/${{ steps.create_issue.outputs.issue-number }}"
